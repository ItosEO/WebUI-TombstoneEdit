name: Build and Package KernelSU Module

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    # 清理缓存和重新安装依赖
    - name: Clear npm cache and reinstall dependencies
      run: |
        npm cache clean --force
        rm -rf node_modules package-lock.json
        npm install
        
    # 确保原生依赖正确安装
    - name: Install Parcel native dependencies
      run: |
        npm install @parcel/rust-linux-x64-gnu --save-dev --force
        
    # 验证依赖
    - name: Verify Parcel installation
      run: |
        npm list @parcel/rust-linux-x64-gnu || echo "Native module not found, will try alternative approach"
        
    - name: Build WebUI
      run: |
        # 如果原生模块仍然有问题，使用 --no-cache 和环境变量
        export PARCEL_WORKERS=1
        npm run build || npm run build -- --no-cache
      
    - name: Get module information
      id: module_info
      run: |
        MODULE_ID=$(grep '^id=' module/module.prop | cut -d'=' -f2)
        TIMESTAMP=$(date +'%Y%m%d-%H%M%S')
        OUTPUT_FILENAME="${MODULE_ID}_${TIMESTAMP}.zip"
        echo "module_id=$MODULE_ID" >> $GITHUB_OUTPUT
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "output_filename=$OUTPUT_FILENAME" >> $GITHUB_OUTPUT
        
    - name: Create module package
      run: |
        cd module
        zip -r "../${{ steps.module_info.outputs.output_filename }}" .
        cd ..
        
    - name: Fix ZIP path separators
      run: |
        cat << 'EOF' > fix_zip_paths.py
        import zipfile
        import os
        import tempfile
        import shutil
        import sys

        def fix_zip_paths(zip_path):
            # Create temporary directory
            with tempfile.TemporaryDirectory() as temp_dir:
                temp_zip = os.path.join(temp_dir, 'temp.zip')

                # Read original ZIP and create new ZIP with fixed paths
                with zipfile.ZipFile(zip_path, 'r') as old_zip:
                    with zipfile.ZipFile(temp_zip, 'w', zipfile.ZIP_DEFLATED) as new_zip:
                        for item in old_zip.infolist():
                            # Replace backslashes with forward slashes
                            new_name = item.filename.replace('\\', '/')

                            # Get file content
                            data = old_zip.read(item.filename)

                            # Write to new ZIP with corrected path
                            new_zip.writestr(new_name, data)

                # Replace original file
                shutil.move(temp_zip, zip_path)
                print(f"Fixed ZIP file path separators: {zip_path}")

        if __name__ == "__main__":
            if len(sys.argv) > 1:
                fix_zip_paths(sys.argv[1])
        EOF
        
        python fix_zip_paths.py "${{ steps.module_info.outputs.output_filename }}"
        
    - name: Verify ZIP contents
      run: |
        echo "ZIP file contents:"
        unzip -l "${{ steps.module_info.outputs.output_filename }}"
        
    - name: Calculate file hashes and generate summary
      id: file_info
      run: |
        FILENAME="${{ steps.module_info.outputs.output_filename }}"
        
        # 计算文件大小
        FILE_SIZE=$(stat -f%z "$FILENAME" 2>/dev/null || stat -c%s "$FILENAME")
        FILE_SIZE_KB=$((FILE_SIZE / 1024))
        FILE_SIZE_MB=$((FILE_SIZE / 1024 / 1024))
        
        # 计算MD5和SHA256
        if command -v md5sum >/dev/null 2>&1; then
            MD5_HASH=$(md5sum "$FILENAME" | cut -d' ' -f1)
        else
            MD5_HASH=$(md5 -q "$FILENAME")
        fi
        
        SHA256_HASH=$(sha256sum "$FILENAME" | cut -d' ' -f1)
        
        # 输出到GitHub输出变量
        echo "file_size=$FILE_SIZE" >> $GITHUB_OUTPUT
        echo "file_size_kb=$FILE_SIZE_KB" >> $GITHUB_OUTPUT
        echo "file_size_mb=$FILE_SIZE_MB" >> $GITHUB_OUTPUT
        echo "md5_hash=$MD5_HASH" >> $GITHUB_OUTPUT
        echo "sha256_hash=$SHA256_HASH" >> $GITHUB_OUTPUT
        
        echo "Package: $FILENAME"
        echo "File size: ${FILE_SIZE_KB} KB (${FILE_SIZE_MB} MB)"
        echo "MD5: $MD5_HASH"
        echo "SHA256: $SHA256_HASH"
        
    - name: Generate Build Summary
      if: always()
      run: |
        cat << EOF >> $GITHUB_STEP_SUMMARY
        # 📦 构建摘要 - KernelSU 模块打包
        
        ## 🔧 构建信息
        | 项目 | 值 |
        |------|-----|
        | **模块 ID** | \`${{ steps.module_info.outputs.module_id }}\` |
        | **构建时间戳** | \`${{ steps.module_info.outputs.timestamp }}\` |
        | **文件名** | \`${{ steps.module_info.outputs.output_filename }}\` |
        | **构建状态** | ${{ job.status == 'success' && '✅ 成功' || '❌ 失败' }} |
        | **提交哈希** | \`${{ github.sha }}\` |
        | **分支** | \`${{ github.ref_name }}\` |
        
        ## 📊 文件信息
        | 属性 | 值 |
        |------|-----|
        | **文件大小** | ${{ steps.file_info.outputs.file_size_kb }} KB (${{ steps.file_info.outputs.file_size_mb }} MB) |
        | **原始大小** | ${{ steps.file_info.outputs.file_size }} bytes |
        
        ## 🔐 文件校验和
        | 算法 | 哈希值 |
        |------|--------|
        | **MD5** | \`${{ steps.file_info.outputs.md5_hash }}\` |
        | **SHA256** | \`${{ steps.file_info.outputs.sha256_hash }}\` |
        
        ## 📁 ZIP 内容预览
        \`\`\`
        $(unzip -l "${{ steps.module_info.outputs.output_filename }}" | head -20)
        \`\`\`
        
        ---
        *构建于: $(date '+%Y-%m-%d %H:%M:%S UTC')*
        EOF
        
    - name: Upload module package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.module_info.outputs.module_id }}_${{ steps.module_info.outputs.timestamp }}
        path: ${{ steps.module_info.outputs.output_filename }}
        retention-days: 30
